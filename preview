#Control Flow Keywords:
x = 10
if x > 0:
    print("Positive number")
elif x == 0:
    print("Zero")
else:
    print("Negative number")
Positive number
for i in range(5):
    print(i)

n = 5
while n > 0:
    print(n)
    n -= 1
0
1
2
3
4
5
4
3
2
1
#Function and Class Definition Keywords:
#Functions 
def greet(name):
    return f"Hello, {name}!"
print(greet("Yuvraj"))
Hello, Yuvraj!
#Data Management Keywords:
is_student = True
if is_student:
    print("Welcome, student!")
Welcome, student!
#Exception Handling Keywords:
try:    
    x = 10 / 0
except ZeroDivisionError:    
    print("Cannot divide by zero")
finally:    
    print("This will always execute")
Cannot divide by zero
This will always execute
Compare and contrast mutable and immutable objects in Python with examples.

#Mutable Objects:
my_list = [1, 2, 3]
my_list[0] = 10
print(my_list)  
my_list.append(4)
print(my_list)  
[10, 2, 3]
[10, 2, 3, 4]
#Immutable Objects:
my_string = "Hello"
new_string = my_string.replace("H", "J")
print(my_string)
print(new_string)
Hello
Jello
Discuss the different types of operators in Python and provide examples of how they are used.

#Arithmetic Operators:
# Adds two operands.
a = 5
b = 3
print(a + b)  
#Subtracts the second operand from the first
print(a - b)  
#Multiplies two operands
print(a * b)  
#Divides the first operand by the second
print(a / b)  
#Returns the remainder of the division
print(a % b)  
8
2
15
1.6666666666666667
2
#Comparison Operators:
#Checks if two operands are equal.
print(a == b)  
#Checks if two operands are not equal
print(a != b)  
#Checks if the first operand is greater than the second.
print(a > b)
#Checks if the first operand is less than the second
print(a < b)  
False
True
True
False
#Logical Operators:
#and: Returns True if both statements are true
x = True
y = False
print(x and y)  
#or: Returns True if at least one of the statements is true
print(x or y)  
#not: Reverses the logical state of its operand
print(not x)  
False
True
False
# Assignment Operators:
#=: Assigns the value on the right to the variable on the left.
a = 10
print(a)  
#+=: Adds the right operand to the left operand and assigns the result to the left operand
a += 5  
print(a)
10
15
#Bitwise Operators:
#& (AND): Sets each bit to 1 if both bits are 1.
a = 5  # 0101 in binary
b = 3  # 0011 in binary
print(a & b)  
#| (OR): Sets each bit to 1 if at least one of the bits is 1.
print(a | b)  
#^ (XOR): Sets each bit to 1 if only one of the bits is 1.
print(a ^ b)  
#~ (NOT): Inverts all the bits.
print(~a)  
#<< (Left Shift): Shifts bits to the left by a specified number of positions.
print(a << 1)  
#>> (Right Shift): Shifts bits to the right by a specified number of positions.
print(a >> 1) 
1
7
6
-6
10
2
Explain the concept of type casting in Python with examples.

# Implicit Type Casting
a = 5       # Integer
b = 2.5     # Float


result = a + b

print(result)   
print(type(result))
#Explicit Type Casting
x = 4.7
y = int(x)  

print(y)   
print(type(y))  
7.5
<class 'float'>
4
<class 'int'>
#How do conditional statements work in Python? Illustrate with examples
marks = 85
if marks >= 90:
    print("Grade: A")
elif marks >= 75:
    print("Grade: B")
else:
    print("Grade: C")
Grade: B
Describe the different types of loops in Python and their use cases with examples.
#for Loop
for i in range(5):
    print(i)
0
1
2
3
4
#while loop
count = 5
while count > 0:
    print(count)
    count -= 1
5
4
3
2
1
https://docs.google.com/document/d/1ZLbHaSI6J9XrYnMEVjpEngnX8JQmJjHU/edit?usp=sharing&ouid=114387239322825279802&rtpof=true&sd=true
